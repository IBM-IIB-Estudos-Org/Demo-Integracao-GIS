/*
 * JBoss, Home of Professional Open Source
 * Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
 * contributors by the @authors tag. See the copyright.txt in the
 * distribution for a full listing of individual contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.gis.rest;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import com.gis.model.Localizacao;

/**
 * JAX-RS Example
 * <p/>
 * This class produces a RESTful service to read/write the contents of the members table.
 */
@Path("/localizacao")
@RequestScoped
public class LocalizacaoGis {

	private Long seqReg;
	
	@Inject
	private EntityManager em;
		
    /**
     * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,
     * or with a map of fields, and related errors.
     */
    @POST
    @Path("/")
    @Consumes({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Response adicionar(Localizacao localizacao) {
   	   	   	
        Response.ResponseBuilder builder = null;

        try {

            this.seqReg =
                    (Long)em.createNativeQuery(
                            "SELECT public.criar_localizacao('" + localizacao.getLogradouro() + "', '" + localizacao.getNumero() + "', '" + localizacao.getBairro() + "', '" + localizacao.getMunicipio() + "','" + localizacao.getEstado() + "', " + localizacao.getCep() + ", 'CADASTRADO'," + localizacao.getLogradouro() + "," + localizacao.getLatitude() + ");"
                            ).getSingleResult();

            // Create an "ok" response
            builder = Response.ok();
            URI uri = URI.create( "/LocalizacaoGis/" + this.seqReg);
            return Response.created( uri ).build();

        } catch (Exception e) {
            // Handle generic exceptions
            Map<String, String> responseObj = new HashMap<>();
            responseObj.put("error", e.getMessage());
            builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);
        }

        return builder.build();
    }
}
